name: DEV Infra

on:
  push:
    branches:
      - "dev"
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: "Confirm destroy of resources"
        required: true
        default: "DESTROY"
      target:
        description: "Select which infrastructure to destroy"
        required: true
        default: "DEV_INFRA"
        type: choice
        options:
          - DEV_INFRA
          - BACKEND

concurrency:
  group: dev-infra-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-northeast-2
  BUCKET: terraform-state-dev-morgan
  DYNAMODB_TABLE: terraform-state-lock-dev-morgan

jobs:
  backend_config:
    name: Backend Configuration
    if: ${{ github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init (Backend)
        working-directory: backend
        run: terraform init

      - name: Terraform Import S3 Bucket
        working-directory: backend
        run: terraform import aws_s3_bucket.terraform_state $BUCKET || echo "Bucket import failed."

      - name: Terraform Import DynamoDB Table
        working-directory: backend
        run: terraform import aws_dynamodb_table.terraform_state_lock $DYNAMODB_TABLE || echo "DynamoDB table import failed."

      - name: Terraform Plan (Backend)
        working-directory: backend
        id: backend_plan
        run: |
          terraform plan -detailed-exitcode || exit_code=$? && echo "::set-output name=exitcode::$exit_code"

      - name: Terraform Apply (Backend)
        working-directory: backend
        if: steps.backend_plan.outputs.exitcode == '2'
        run: terraform apply -auto-approve

  dev_infra:
    name: Deploy Dev Infrastructure
    if: ${{ github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs: backend_config
    steps:
      - name: Checkout Dev repository
        uses: actions/checkout@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 오타 여부 확인
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init (Dev)
        working-directory: infra_dev
        run: terraform init

      - name: Terraform Plan (Dev)
        working-directory: infra_dev
        id: dev_plan
        run: |
          terraform plan \
          -var="db_password=${{secrets.DB_PASSWORD}}" \
          -var="openvpn_password=${{ secrets.OPENVPN_PASSWORD }}" \
          -var="codedeploy_service_role_arn=${{ secrets.CODE_DEPLOY_SERVICE_ROLE_ARN }}" \
          -var="rds_db_url=${{ secrets.DB_URL }}" \
          -var="rds_db_username=${{ secrets.DB_USERNAME }}" \
          -var="rds_db_name=${{ secrets.DB_NAME }}" \
          -var="rds_db_password=${{ secrets.DB_PASSWORD }}" \
          -var="slack_webhook_url=${{ secrets.SLACK_WEBHOOK_URL }}" \
          -detailed-exitcode || exit_code=$? && echo "::set-output name=exitcode::$exit_code"

      - name: Terraform Apply (Dev)
        working-directory: infra_dev
        if: steps.dev_plan.outputs.exitcode == '2'
        run: |
          terraform apply -auto-approve \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="openvpn_password=${{ secrets.OPENVPN_PASSWORD }}" \
          -var="codedeploy_service_role_arn=${{ secrets.CODE_DEPLOY_SERVICE_ROLE_ARN }}" \
          -var="rds_db_url=${{ secrets.DB_URL }}" \
          -var="rds_db_username=${{ secrets.DB_USERNAME }}" \
          -var="rds_db_name=${{ secrets.DB_NAME }}" \
          -var="rds_db_password=${{ secrets.DB_PASSWORD }}" \
          -var="slack_webhook_url=${{ secrets.SLACK_WEBHOOK_URL }}"

  destroy_infra:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirm_destroy == 'DESTROY' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:
            ${{ env.AWS_REGION }}
            # Dev 인프라 destroy
      - name: Terraform Init (Dev)
        if: ${{ github.event.inputs.target == 'DEV_INFRA' }}
        working-directory: infra_dev
        run: terraform init

      - name: Terraform Destroy (Dev)
        if: ${{ github.event.inputs.target == 'DEV_INFRA' }}
        working-directory: infra_dev
        run: |
          terraform destroy -auto-approve \
          -var="db_password=${{secrets.DB_PASSWORD}}" \
          -var="openvpn_password=${{ secrets.OPENVPN_PASSWORD }}" \
          -var="codedeploy_service_role_arn=${{ secrets.CODE_DEPLOY_SERVICE_ROLE_ARN }}" \
          -var="rds_db_url=${{ secrets.DB_URL }}" \
          -var="rds_db_username=${{ secrets.DB_USERNAME }}" \
          -var="rds_db_name=${{ secrets.DB_NAME }}" \
          -var="rds_db_password=${{ secrets.DB_PASSWORD }}" \
          -var="slack_webhook_url=${{ secrets.SLACK_WEBHOOK_URL }}" \

      - name: Empty S3 Bucket
        if: ${{ github.event.inputs.target == 'BACKEND' }}
        working-directory: backend
        run: |
          aws s3api list-object-versions --bucket $BUCKET --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}}' > versions.json
          aws s3api delete-objects --bucket $BUCKET --delete file://versions.json || echo "No object versions to delete"
          aws s3api list-object-versions --bucket $BUCKET --query '{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' > markers.json
          aws s3api delete-objects --bucket $BUCKET --delete file://markers.json || echo "No delete markers to delete"

      # 백엔드 리소스를 대상으로 실행 (예: backend 디렉토리)
      - name: Terraform Init (Backend)
        if: ${{ github.event.inputs.target == 'BACKEND' }}
        working-directory: backend
        run: terraform init

      - name: Terraform Import S3 Bucket
        if: ${{ github.event.inputs.target == 'BACKEND' }}
        working-directory: backend
        run: terraform import aws_s3_bucket.terraform_state $BUCKET || echo "Bucket import failed."

      - name: Terraform Import DynamoDB Table
        if: ${{ github.event.inputs.target == 'BACKEND' }}
        working-directory: backend
        run: terraform import aws_dynamodb_table.terraform_state_lock $DYNAMODB_TABLE || echo "DynamoDB table import failed."

      - name: Terraform Destroy (Backend)
        if: ${{ github.event.inputs.target == 'BACKEND' }}
        working-directory: backend
        run: terraform destroy -auto-approve
